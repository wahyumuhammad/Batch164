@model MiniProject.ViewModel.mUnitVM

@using (Html.BeginForm("Add", "mUnit", FormMethod.Post, htmlAttributes: new { @id = "form-add-unit" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="form-horizontal">
        
        <div class="form-group">
            @Html.LabelFor(model => model.code, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.code, new { htmlAttributes = new { @class = "form-control", @readonly=true } })
                @Html.ValidationMessageFor(model => model.code, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control", @onFocusOut= "cekNama()" } })
                @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="modal-footer">
            <div class="col-md-10">
                <button id="add-unit-submit" type="submit" class="btn btn-primary btn-sm">Save</button>
                <button id="cancel" type="button" class="btn btn-warning btn-sm">Cancel</button>
               
            </div>
        </div>

    </div>

    @*<div id="NamaSama"> </div>*@
}
@Scripts.Render("~/bundles/jqueryval")
